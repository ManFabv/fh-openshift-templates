#!/bin/bash
#
# This script updates the generated templates. See generated/README.md for more
# information.

set -o errexit
set -o nounset
set -o pipefail

PROJECT_ROOT="$(dirname "${BASH_SOURCE}")/.."

TEMPLATE_TOOL='openshift-template-tool'
TEMPLATE_TOOL_URL='github.com/feedhenry/openshift-template-tool'

# Check that the required template tool is available and try to install it
# otherwise.
# Globals:
#   PATH
#   TEMPLATE_TOOL
#   TEMPLATE_TOOL_URL
# Arguments:
#   None
# Returns:
#   None
checktool() {
  if ! hash "${TEMPLATE_TOOL}" 2>/dev/null; then
    echo >&2 "Trying to install ${TEMPLATE_TOOL}..."
    go get -x "${TEMPLATE_TOOL_URL}"
  fi
  # If after a successful go get the executable still cannot be found, we may
  # need to add GOPATH/bin to PATH.
  if ! hash "${TEMPLATE_TOOL}" 2>/dev/null; then
    echo >&2 'Extending PATH to include GOPATH/bin...'
    export PATH="${GOPATH//://bin:}/bin:$PATH"
  fi
  # If the executable still cannot be found, fail.
  if ! hash "${TEMPLATE_TOOL}" 2>/dev/null; then
    echo >&2 "Could not find ${TEMPLATE_TOOL}." \
             'Follow the installation instructions in' \
             'https://github.com/feedhenry/openshift-template-tool,' \
             'or place a pre-built binary in your PATH.'
    return 1
  fi
}

# Generate a template by merging a base template with other components.
# Globals:
#   TEMPLATE_TOOL
# Arguments:
#   $1     - path to generated output template
#   $2     - base template, its metadata will be used in the generated template
#   ${@:3} - component templates, its objects and parameters will be merged with
#            the base
# Returns:
#   None
generate() {
  # Temporary file to store the merged template. We write to a temporary file so
  # that if there is an error we won't truncate the original base template.
  local tmp_output
  tmp_output="$(mktemp "${TMPDIR:-/tmp}/template-merge-output-XXXXXX.json")"

  # Merge all component templates with core template.
  "${TEMPLATE_TOOL}" merge "${@:2}" > "${tmp_output}"

  # No errors so far, make the merged template the new generated template.
  mv "${tmp_output}" "$1"
}

(
  checktool

  cd "${PROJECT_ROOT}"

  # Generate Core Infra template.
  ARGS=(
    # Output:
    generated/fh-core-infra
    # Base template:
    base/fh-core-infra
    # Component templates:
    memcached/memcached-template
    mongodb/mongodb-core-single-template
    mysql/mysql-persistent-template
    redis/redis-template
  )
  generate "${ARGS[@]/%/.json}"

  # Generate Core Backend template.
  ARGS=(
    # Output:
    generated/fh-core-backend
    # Base template:
    base/fh-core-backend
    # Component templates:
    fh-aaa-single-template
    fh-messaging-single-template
    fh-metrics-single-template
    fh-scm-single-template
    fh-supercore-single-template
    gitlab-shell/gitlab-shell-single-template
    unifiedpush-single-template
  )
  generate "${ARGS[@]/%/.json}"

  # Generate Core Frontend template.
  ARGS=(
    # Output:
    generated/fh-core-frontend
    # Base template:
    base/fh-core-frontend
    # Component templates:
    fh-appstore-single-template
    fh-ngui-single-template
    # NOTE: Even though it technically belongs in the "backend" category,
    # millicore goes into the frontend template in order to be deployed after
    # fh-supercore and fh-aaa.
    fh-millicore-single-template
  )
  generate "${ARGS[@]/%/.json}"

  # Generate Core Monitoring template.
  ARGS=(
    # Output:
    generated/fh-core-monitoring
    # Base template:
    base/fh-core-monitoring
    # Component templates:
    nagios/nagios-template
  )
  generate "${ARGS[@]/%/.json}"
)
